TODO:
    * test for new c_function_callback_transform
    * test for inout___ transform
    * regen oes
    * gen xtp
    * new nested hint generator
    * parser : using namespace in namespace;
    * parser : brief comment?

future plan:
    generator:
        * add comment for hint if there is one
        * using namespace;

feature list:
    * cxxparser:
        * namespace
            * name
            * functions
            * nested:
                * namespaces
                * enums
                * classes/struct
            * variables
            * typedefs
        * class/struct
            * constructors
            * destructors
            * inherit
            * everything in namespace
        * template: (record only, detail is not pared)
            * class/struct template
            * template type using: template <...> using a = b<...>;
        * union
            - nested unnamed union (not supported, seems not supported by libclang)
        * function/method:
            * name
            * return type
            * argument list:
                * name
                * type
            - default arguments (not supported yet)
        * enum:
            * scoped enum
            * un-scoped enum
        * alias:
            * typedef b a;
            * using a = b;
            - using a;(not supported yet)
            - using namespace;(not supported yet)
        * macros
            * macros is parsed, but:
                - new defined macro will override previous one.
            * If a basic cpp variable is initialized with a macro, that value can be parsed correctly(see test/pyside/parser/undef).
        * stl: (set include in environment or in args first)
            * vector
            * list
            * string
        * built-in headers:
            * parse global typedefs and macros only.

    * preprocessor
        * macros (partial)
            * convert macros into global constant variable if we can.
        * type caster:
            * all type caster is will be generated in namespace autocxxpy
        * extra constant class in namespace autocxxpy:
            make constants easier to import and reference

    * generator:
        * everything supported in parser & preprocessor

    * hint:
        * everything supported in parser & preprocessor

    - stl: (no plan in the near future, seems unsupported by libclang)

hacks:
    * treat any virtual function as callback
    * if argument for a callback is pointer or reference, its value will be copied, modifying its value will have no effect
    * c_function_pointer with void * -> std::function without void *(no hint currently)

optional builtin hacks:
    * convert macros into constant variable

Changelog:
    v0.2:
        + cross-assignment
        + type manager: use type manager to resolve types
        + preprocessor:
            + unsupported functions list
            + ignore unsupported functions
        * [New] CXXParse can now recognize some template, but not fully parsed.
        * [New] CXXParser can now parse namespace
        * [New] Added support for ```using alias = type```type;

        * [Add] Added literal property for GeneratorVariable

        * [Del] Removed GeneratorLiteralVariable, use GeneratorVariable instead
        * [Del] Deleted export enum option: exports all non-scoped enum
    v0.1:
        * Global functions, enums, variables, classes, typedefs
        * PreProcessor recognize C style define

TODO:
    * ci & tests
    * cli: cross-platform support without switching OS(win, linux, x86, x64)
    * speed up build(if possible,  c++20 modules?)

Future Plan:
    parser:
        * using namespace;

Feature List:
    * cxxparser:
        * namespace
            * name
            * functions
            * nested:
                * namespaces
                * enums
                * classes/struct
            * variables
            * typedefs
        * class/struct
            * constructors
            * destructors
            * inherit
            * everything in namespace
        * template: (record only, detail is not pared)
            * class/struct template
            * template type using: template <...> using a = b<...>;
        * function/method:
            * name
            * return type
            * argument list:
                * name
                * type
            - default arguments (not supported yet)
        * union:
            * typed union
            * anonymous union
        * enum:
            * scoped enum
            * un-scoped enum
        * alias:
            * typedef b a;
            * using a = b;
            - using a
            - using namespace;(not supported yet)
        * macros
            * macros is parsed, but:
                - new defined macro will override previous one.
            * If a basic cpp variable is initialized with a macro, that value can be parsed correctly(see test/pyside/parser/undef).
        * stl: (set include in environment or in args first)
            * vector
            * list
            * string
        * built-in headers:
            * parse global typedefs and macros only.
        * brief_comment:
            * qt style brief comment: //! or /*!

    * preprocessor
        * macros (partial)
            * convert macros into global constant variable if we can.
        * type caster:
            * all type caster is will be generated in namespace autocxxpy
        * extra constant class in namespace autocxxpy:
            make constants easier to import and reference

    * generator:
        * everything supported in parser & preprocessor

    * hint:
        * everything supported in parser & preprocessor

hacks:
    * treat any virtual function as callback
    * if argument for a callback is pointer or reference, its value will be copied, modifying its value will have no effect
    * c_function_pointer with void * -> std::function without void *
    * treat some pointer/reference argument as inout: added in return list

optional builtin hacks:
    * convert macros into constant variable

KNOWN ISSUES:
 * Build under Visual Studio 2019 16.1 failed (Visual Studio problem, fixed in 16.2 Preview).
 * Linking under Visual Studio 2019 Preview 16.2 is super slow(CTP: more than 10 minutes).
